name: Release a new version

on:
  release:
    types:
      - published

env:
  NODE_OPTIONS: '--max-old-space-size=8192'

jobs:
  publish-to-npm:
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow runs in a release branch or is CIM release
        run: |
          if [[ "${{ github.event.release.target_commitish }}" != *releases* && ! "$GITHUB_REF_NAME" =~ -(cim|chatbot)$ ]]; then
            echo "OCM: Expecting to be in a release branch, but we are in: ${{ github.event.release.target_commitish }}"
            echo "CIM: Not a CIM release, since tag does not end with '-cim'. Tag is: $GITHUB_REF_NAME"
            echo "Chatbot: Not a Chatbot release, since tag does not end with '-chatbot'. Tag is: $GITHUB_REF_NAME"
            exit 1
          fi

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0

      - name: Lookup for workspaces to be published
        run: |
          declare -a LIBS=()
          if [[ "$GITHUB_REF_NAME" =~ -chatbot$ ]]; then
            LIBS+=("chatbot")
          else
            for pkg in libs/*/package.json; do
              lib_name="${pkg:5:-13}"
              if [[ "$lib_name" != "chatbot" && "$(jq '.publishConfig.access == "public"' "${pkg}")" = "true" ]]; then
                LIBS+=("$lib_name")
              fi
            done
          fi
          echo "LIBS=${LIBS[@]}" >> $GITHUB_ENV
          (IFS=,; printf 'The following workspaces will be published: [%s]\n' "${LIBS[*]}")

      - name: Configuring git
        run: |
          git config user.name '${{ github.actor }}'
          git config user.email '${{ github.actor }}@users.noreply.github.com'

      - uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: ${{ vars.NODEJS_VERSION }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Bump workspaces to ${{ github.ref_name }}
        run: |
          for LIB in $(echo ${LIBS}); do
            echo Bumping @openshift-assisted/"${LIB}"
            # The next command adds a `stableVersion` field after bumping.
            # We need to remove it because it's buggy. See: https://github.com/yarnpkg/berry/issues/4328
            yarn workspace @openshift-assisted/"${LIB}" version "${GITHUB_REF_NAME:1}"
            jq 'del(.stableVersion)' libs/"${LIB}"/package.json > libs/"${LIB}"/package.tmp.json
            mv libs/"${LIB}"/package.tmp.json libs/"${LIB}"/package.json
          done

      - name: Build
        run: yarn build:all

      - name: Publish workspaces to NPM
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: |
          yarn config set npmScopes.openshift-assisted.npmAuthToken $NPM_AUTH_TOKEN
          for LIB in $(echo ${LIBS}); do
            printf 'Publishing @openshift-assisted/%s\n' "${LIB}"
            yarn workspace @openshift-assisted/${LIB} npm publish
            # Verify the package has been published before publishing another one.
            until [[ "$(yarn npm info @openshift-assisted/${LIB} --fields version --json | jq -r '.version')" = "${GITHUB_REF_NAME:1}" ]]; do
              printf '@openshift-assisted/%s has not ben published yet\n' "${LIB}"
              sleep ${{ vars.NPM_PUBLISH_DELAY }}
              echo "Retrying..."
            done
          done
